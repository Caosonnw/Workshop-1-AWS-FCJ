[
{
	"uri": "//localhost:1313/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Guide to Deploying a Website on AWS EC2 Using Docker and Configuring NGINX Overall This tutorial offers an overview of the process of deploying a website on AWS EC2 using Docker and NGINX. You will learn how to create an EC2 instance, install Docker, and build a container to run your web application. Following that, we will configure NGINX as a reverse proxy to efficiently route HTTP requests to your container. This guide will not only help you understand each step of the deployment process but also assist in optimizing and securing your application on the cloud.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.1-createec2-aws/",
	"title": "Create EC2 Ubuntu",
	"tags": [],
	"description": "",
	"content": "Create EC2 Ubuntu Go to VPC service administration console and search for EC2. After accessing EC2 Dashboard Click Launch instance. Click Create VPC. Fill in information for EC2 Instance. You can choose many different operating systems here. In this step, I choose Ubuntu. "
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "In this tutorial, we will explore how to deploy a website on AWS EC2, using Docker to containerize the application, and configuring NGINX as a reverse proxy. EC2, a service provided by Amazon Web Services, allows us to launch and manage virtual servers in the cloud, offering a powerful and flexible environment for deploying applications. Docker will help us package the application into a container, ensuring consistency and ease of deployment across different environments. Finally, we will use NGINX to handle HTTP requests, optimizing performance and enhancing security for the application.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/",
	"title": "Preparing EC2",
	"tags": [],
	"description": "",
	"content": "In this step, we will need to create an EC2 Ubuntu Instance.\nTo learn how to create EC2 instances, you can refer to the lab article:\nIntroduction to Amazon EC2 Content Create EC2 Ubuntu Create key pair Configure storage EC2 connection and Docker installation Connect FileZilla to EC2 Build Images and run Docker containers Configure Security Group and Nginx "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.2-createkeypair/",
	"title": "Create key pair",
	"tags": [],
	"description": "",
	"content": "Create key pair Create Key pair. In Amazon EC2 (Elastic Compute Cloud), a key pair is a pair of cryptographic keys used to securely log in to your EC2 instances. A key pair consists of two parts:\nPublic Key: Stored on the EC2 instance you create. When you create a new instance, you can specify a public key from an existing key pair or create a new key pair.\nPrivate Key: Downloaded and stored locally on your computer when you create a key pair. This key is used to log in to your EC2 instance via SSH (Secure Shell). Only you have access to this private key.\nWhen you connect to an EC2 instance via SSH, the private key is used to authenticate that you have access to the instance. Without the private key that matches the public key on the instance, you will not be able to access it.\nIn other words, the key pair helps ensure that only those with the private key can access the EC2 instance, protecting the instance from unauthorized access.\nThis step is very important and will require a .ppk file to connect FileZilla to EC2 Ubuntu\nFileZilla is an open source software application used to transfer files between your personal computer and a remote server using the FTP (File Transfer Protocol) protocol and related protocols such as SFTP (SSH File Transfer Protocol) and FTPS (FTP Secure).\nClick Create new key pair\nFill in the information to create a new key pair Step 1: Fill in the key pair name Step 2: Select the file format Step 3: Click Create key pair "
},
{
	"uri": "//localhost:1313/2-prerequiste/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "\rTo perform this exercise, you need to prepare a website deployment file and rent an Ubuntu EC2 server.\nTo learn how to create EC2 instances and VPCs with public/private subnets, you can refer to the lab:\nAbout Amazon EC2 Works with Amazon VPC Content Prepare EC2 "
},
{
	"uri": "//localhost:1313/3-cleanup/",
	"title": "Cleaning up resources",
	"tags": [],
	"description": "",
	"content": "We will perform the following steps to delete the resources we created in this lab.\nDelete EC2 instance Delete the key pair Go to EC2 service management interface Click Key Pairs. Click to select the original key pair we created. Click Actions and then select Delete Remove and delete Security Groups. Click Security Groups\nClick to select the Security Groups that are currently matched to the original EC2.\nClick Actions - Click Delete Security Groups - Click Delete 3. Stop and delete EC2.\nClick Instance - Click the initially created Instance.\nClick Instance state - Click to select Terminate (delete) instance - Click Terminate (delete) "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.3-configurestorage/",
	"title": "Configure Storage",
	"tags": [],
	"description": "",
	"content": "Configure Storage In this step, you can configure EC2 storage. In Amazon EC2 (Elastic Compute Cloud), Configure Storage is the step in the process of creating or initializing an EC2 instance, where you can set up and customize the storage capacity for that instance.\nConfigure Storage is an important part of optimizing the performance and cost of the system when running on AWS, especially when you need a system that is scalable and meets the specific storage requirements of the application.\nIn this step, you can increase or decrease within the free tier range to optimize costs.\nFinally, click Launch Instane to create EC2. "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.4-connectec2/",
	"title": "Connect to EC2 and install Docker",
	"tags": [],
	"description": "",
	"content": "Connect to EC2 and install Docker After successfully creating the server, click Connect to Instance. Or you can click Connect in EC2 Dashboard Instance\nAfter clicking Connect, you will be redirected to the Ubuntu screen website. Install Docker. Docker installation command on Ubuntu sudo snap install docker "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.5-connectfztoec2/",
	"title": "Connect FileZilla to EC2",
	"tags": [],
	"description": "",
	"content": "Connect FileZilla to EC2 Connect FileZilla to EC2 Click Marked Icon Click New site Step 1: You can change the name as you like.\nStep 2: Select SFTP - SSH File Transfer Protocol.\nStep 3: Enter Public IPv4 DNS.\nCopy to EC2 Instance\nStep 4: Select the key file. Step 5: Enter username:\u0026ldquo;ubuntu\u0026rdquo;.\nStep 6: Select the key pair file path created in step 2.1.2.\nStep 7: Click Connect.\nCheck Always trust this host, add this key to the cache\nAnd click OK\nThen you drag your deploy file to the server. "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.6-builddocker/",
	"title": "Build Docker",
	"tags": [],
	"description": "",
	"content": "Build Images and Run Docker Containers Build Docker Images. Run Docker Containers "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.7.configureport/",
	"title": "Configuring Security Group and Nginx",
	"tags": [],
	"description": "",
	"content": "Configuring Security Group and Nginx Configure Security Group. Click Security Click Security groups Add rule Select Custom TCP Step 2: Enter the port running in Docker Container Step 3: Select Anywhere Click Save rule Successfully deploy the website running on Docker with port other than 3000. But the problem is still not being able to move between website paths. We need to configure Nginx. 4. Configure Nginx.\nAccess the bash of the docker container running the website. Edit nginx.conf file: user nginx; worker_processes auto; error_log /var/log/nginx/error.log warn; pid /var/run/nginx.pid; events { worker_connections 1024; } http { include /etc/nginx/mime.types; default_type application/octet-stream; log_format main \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#34;$request\u0026#34; \u0026#39; \u0026#39;$status $body_bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#39; \u0026#39;\u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;; access_log /var/log/nginx/access.log main; sendfile on; #tcp_nopush on; keepalive_timeout 65; #gzip on; #include /etc/nginx/conf.d/\\*.conf; server { listen 80; location / { root /usr/share/nginx/html; index index.html index.htm; try_files $uri $uri/ /index.html; } } } Once completed, restart the container. Successfully accessed the endpoints in the website. "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]